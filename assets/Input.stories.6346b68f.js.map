{"version":3,"file":"Input.stories.6346b68f.js","sources":["../../node_modules/lodash.uniqueid/index.js","../../src/components/input/Input.tsx"],"sourcesContent":["/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to generate unique IDs. */\nvar idCounter = 0;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\n/**\n * Generates a unique ID. If `prefix` is given, the ID is appended to it.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {string} [prefix=''] The value to prefix the ID with.\n * @returns {string} Returns the unique ID.\n * @example\n *\n * _.uniqueId('contact_');\n * // => 'contact_104'\n *\n * _.uniqueId();\n * // => '105'\n */\nfunction uniqueId(prefix) {\n  var id = ++idCounter;\n  return toString(prefix) + id;\n}\n\nmodule.exports = uniqueId;\n","import React, { useRef, useState } from \"react\";\nimport uniqueId from \"lodash.uniqueid\";\n\nimport styles from \"./Input.module.scss\";\nimport { ReactComponent } from \"../../assets/svgr-custom\";\n\ninterface InputProps {\n  value: string;\n  onChange?: React.HTMLAttributes<HTMLInputElement>[\"onChange\"];\n  placeholder?: string;\n  label?: string;\n  icon?: typeof ReactComponent;\n}\n\nconst Input: React.FC<InputProps> = ({ value, onChange, placeholder, label, icon: Icon }) => {\n  const [id] = useState(uniqueId());\n  const input = useRef<HTMLInputElement>(null);\n\n  return (\n    <div className={styles.inputContainer} onClick={() => input.current?.focus()}>\n      {Icon && (\n        <span className={styles.iconContainer}>\n          <Icon />\n        </span>\n      )}\n\n      <div className={styles.innerInput}>\n        <input type=\"text\" id={id} className={styles.input} placeholder={label ? \" \" : placeholder} ref={input} />\n        <label htmlFor={id} className={styles.label}>\n          {label}\n        </label>\n      </div>\n    </div>\n  );\n};\n\nexport default Input;\n"],"names":["INFINITY","symbolTag","freeGlobal","global","freeSelf","root","objectProto","idCounter","objectToString","Symbol","symbolProto","symbolToString","baseToString","value","isSymbol","result","__name","isObjectLike","toString","uniqueId","prefix","id","lodash_uniqueid","Input","onChange","placeholder","label","useState","input","useRef","_jsxs","styles","inputContainer","Icon","_jsx","iconContainer","innerInput","Input$1"],"mappings":"6NAUA,IAAIA,EAAW,EAAI,EAGfC,EAAY,kBAGZC,EAAa,OAAOC,GAAU,UAAYA,GAAUA,EAAO,SAAW,QAAUA,EAGhFC,EAAW,OAAO,MAAQ,UAAY,MAAQ,KAAK,SAAW,QAAU,KAGxEC,EAAOH,GAAcE,GAAY,SAAS,aAAa,EAAC,EAGxDE,EAAc,OAAO,UAGrBC,EAAY,EAOZC,EAAiBF,EAAY,SAG7BG,EAASJ,EAAK,OAGdK,EAAcD,EAASA,EAAO,UAAY,OAC1CE,EAAiBD,EAAcA,EAAY,SAAW,OAU1D,SAASE,EAAaC,EAAO,CAE3B,GAAI,OAAOA,GAAS,SAClB,OAAOA,EAET,GAAIC,EAASD,CAAK,EAChB,OAAOF,EAAiBA,EAAe,KAAKE,CAAK,EAAI,GAEvD,IAAIE,EAAUF,EAAQ,GACtB,OAAQE,GAAU,KAAQ,EAAIF,GAAU,CAACb,EAAY,KAAOe,CAC9D,CAVSC,EAAAJ,EAAA,gBAoCT,SAASK,EAAaJ,EAAO,CAC3B,MAAO,CAAC,CAACA,GAAS,OAAOA,GAAS,QACpC,CAFSG,EAAAC,EAAA,gBAqBT,SAASH,EAASD,EAAO,CACvB,OAAO,OAAOA,GAAS,UACpBI,EAAaJ,CAAK,GAAKL,EAAe,KAAKK,CAAK,GAAKZ,CAC1D,CAHSe,EAAAF,EAAA,YA0BT,SAASI,EAASL,EAAO,CACvB,OAAOA,GAAS,KAAO,GAAKD,EAAaC,CAAK,CAChD,CAFSG,EAAAE,EAAA,YAqBT,SAASC,EAASC,EAAQ,CACxB,IAAIC,EAAK,EAAEd,EACX,OAAOW,EAASE,CAAM,EAAIC,CAC5B,CAHSL,EAAAG,EAAA,YAKT,IAAAG,EAAiBH,kMCnJjBI,EAAAP,EAAA,CAAA,CAAqC,MAAAH,EAAEA,SAAAA,EAAOW,YAAAA,EAAUC,MAAAA,EAAaC,KAAAA,CAAkB,IAAA,CACrF,KAAA,CAAAL,CAAA,EAAAM,mBAAAR,EAAA,CAAA,EACAS,EAAAC,iBAAA,IAAA,EAEA,OAAAC,EAAA,MAAA,CACE,UAAAC,EAAA,eAAuBC,QAAAA,IAAAA,OAAAA,OAAAA,EAAAA,EAAAA,UAAAA,YAAAA,EAAAA,SAAsD,SAAA,CAAAC,GAAAC,EAAA,OAAA,CAEzE,UAAAH,EAAA,cAAwBI,SAAAA,EAAAA,EAAAA,EAAAA,CACjB,CAAA,EAAAL,EAAA,MAAA,CAIT,UAAAC,EAAA,WAAuBK,SAAAA,CAAAA,EAAAA,QAAAA,CACrB,KAAA,OAAY,GAAAf,EAAOA,UAAAA,EAAAA,MAA0BO,YAAAA,EAAAA,IAAAA,EAAkCH,IAAAA,CAAkBG,CAAAA,EAAAA,EAAAA,QAAAA,CACjG,QAAAP,EAAgBA,UAAAA,EAAAA,MAAsBK,SAAAA,CACnCA,CAAAA,CAAAA,CACK,CAAA,CAAA,CACJ,CAAA,CAGZ,EApBA,SAsBAW,EAAAd;;;;;;;;;;;;;;;;;;;"}